Synopsis
=====
Since the input involves big integers. The solution must be derived at least as efficiently as logarithmically. It's quite reasonable because each time the difference between numbers is halved regardless of the number chosen. When a number is selected for the turn, the problem is reduced to choose a number given the new differences in the next turn. The process forms a search sequence and continues until reaching a base case where a decision can be made. The search sequence may be cached to accelerate the following test cases so that the time and space complexity are both logarithmic in terms of the maximum differences between numbers. 

Algorithm
=====
Next, start with simple test cases to figure out the decision to make according to the differences between numbers. The main algorithm follows.
1.) sort the input numbers in an ascending order, say n1 <= n2 <=n3
2.) take the differences diff1 = n2 - n1 and diff2 = n3 - n2
3.) check if diff1 and diff2 form a boundary case and solve directly as follows.
(0, 0) => return "Second"
(0, 1) => return "First"
(1, 0) => return "First"
(1, 1) => return "Second"
4.) If not, make the decision based on diff1 and diff2 collectively and diff3 when necessary as follows. The procedure isFirst() returns the decision and is explained later. If there is any decision saying "First," then the final decision goes for First. Otherwise, "Second" is returned.
if(diff1 == diif2 || diff1 = diff2 + 1) {
    // differences are balanced, only consider n1 and n3 which are selectable
    return isFirst(diff1) || isFirst(diff2) ? "First" : "Second"
} else {
    // all the three numbers are selectable and should be considered
    let diff3 = n3 - n1;
    return isFirst(diff1) || isFirst(diff2) || isFirst(diff3) ? "First" : "Second"
}

The isFirst(diff) makes a decision, true for First and false for Second, based on the difference between numbers. The base cases are 1 for Second and 2 for First since 1 and 2 will be respectively reduced to boundary cases (0, 1) and (1,1). The decision is derived recursively according to the following rules.
r1.) if there exists a First decision from the reduced differences, go for "Second."
r2.) if all the decisions for the reduced differences are Second, go for "First."
In this way, with (0, 1) => First and (1, 1) => Second, base cases 1 and 2 return "Second" and "First" respectively.

Now, following the boundary cases, we found the decisions for ranges of differences shown below.
First      Second
             1
2            3-5              
6-10        11-21
22-42       43-85
....

The start of the Second range would be the start of the First range multiplied by 2 minus 1, say 3 = 2*2-1 and 11 = 6*2-1. The start of a particular First range can be derived by multiplying the previous start of the Second range by 2, say 2 = 1*2 and 6 = 3 * 2.

Subsequently, we are able to make the decision given a difference by searching for the corresponding range in the sequence. The sequence is cached in a list and only the start of the First difference ranges are stored since the Second difference ranges can be computed in constant time. The complete isFirst(diff) is described as follows.
1.) if diff == 1, return false since it is reduced to (0, 1) case.
2.) extend the list until diff is covered
while(true) {
    if(diff > list.last())
        list.add(2 * (list.last() * 2 - 1));           
}
3.) binary search the list for the difference range start given diff >= 2
4.) return true if diff is in the First range, or false if in the Second range.

Alternatives
=====
Preliminary trials considered the bits of differences but failed some test cases. Nonetheless, a simple solution by investigating the bit patterns may exist.
